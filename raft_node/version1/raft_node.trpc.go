// Code generated by trpc-go/trpc-go-cmdline v2.5.2. DO NOT EDIT.
// source: raft_node.proto

package version1

import (
	"context"
	"errors"
	"fmt"

	_ "git.code.oa.com/trpc-go/trpc-go"
	"git.code.oa.com/trpc-go/trpc-go/client"
	"git.code.oa.com/trpc-go/trpc-go/codec"
	_ "git.code.oa.com/trpc-go/trpc-go/http"
	"git.code.oa.com/trpc-go/trpc-go/restful"
	"git.code.oa.com/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// RaftServiceService defines service.
type RaftServiceService interface {
	// Empty 内部服务
	Empty(ctx context.Context, req *EmptyRequest) (*EmptyResponse, error)
}

func RaftServiceService_Empty_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &EmptyRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(RaftServiceService).Empty(ctx, reqbody.(*EmptyRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// requestBodyRaftServiceServiceEmptyRESTfulPath0 GET: /v1/empty
type requestBodyRaftServiceServiceEmptyRESTfulPath0 struct{}

func (requestBodyRaftServiceServiceEmptyRESTfulPath0) Locate(message restful.ProtoMessage) interface{} {
	x := message.(*EmptyRequest)
	return x
}

func (requestBodyRaftServiceServiceEmptyRESTfulPath0) Body() string {
	return "*"
}

// RaftServiceServer_ServiceDesc descriptor for server.RegisterService.
var RaftServiceServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "lovelydayss.raft_node.RaftService",
	HandlerType: ((*RaftServiceService)(nil)),
	Methods: []server.Method{
		{
			Name: "/lovelydayss.raft_node.RaftService/empty",
			Func: RaftServiceService_Empty_Handler,
			Bindings: []*restful.Binding{{
				Name:  "/lovelydayss.raft_node.RaftService/empty",
				Input: func() restful.ProtoMessage { return new(EmptyRequest) },
				Filter: func(svc interface{}, ctx context.Context, reqbody interface{}) (interface{}, error) {
					return svc.(RaftServiceService).Empty(ctx, reqbody.(*EmptyRequest))
				},
				HTTPMethod:   "GET",
				Pattern:      restful.Enforce("/v1/empty"),
				Body:         requestBodyRaftServiceServiceEmptyRESTfulPath0{},
				ResponseBody: nil,
			}},
		},
	},
}

// RegisterRaftServiceService registers service.
func RegisterRaftServiceService(s server.Service, svr RaftServiceService) {
	if err := s.Register(&RaftServiceServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("RaftService register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedRaftService struct{}

// Empty 内部服务
func (s *UnimplementedRaftService) Empty(ctx context.Context, req *EmptyRequest) (*EmptyResponse, error) {
	return nil, errors.New("rpc Empty of service RaftService is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// RaftServiceClientProxy defines service client proxy
type RaftServiceClientProxy interface {
	// Empty 内部服务
	Empty(ctx context.Context, req *EmptyRequest, opts ...client.Option) (rsp *EmptyResponse, err error)
}

type RaftServiceClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewRaftServiceClientProxy = func(opts ...client.Option) RaftServiceClientProxy {
	return &RaftServiceClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *RaftServiceClientProxyImpl) Empty(ctx context.Context, req *EmptyRequest, opts ...client.Option) (*EmptyResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/lovelydayss.raft_node.RaftService/empty")
	msg.WithCalleeServiceName(RaftServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("RaftService")
	msg.WithCalleeMethod("Empty")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &EmptyResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
